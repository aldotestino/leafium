{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gatewayId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gatewayName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lat",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "long",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "altitude",
          "type": "uint256"
        }
      ],
      "name": "addGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGateways",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lat",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "long",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "altitude",
              "type": "uint256"
            }
          ],
          "internalType": "struct Leafium.Gateway[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyGateways",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lat",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "long",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "altitude",
              "type": "uint256"
            }
          ],
          "internalType": "struct Leafium.Gateway[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x919ccb89e253893cfe158a48984b3586a8d9638a22db9fdad3c6abf4662d870c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1072284",
    "logsBloom": "0x
    "blockHash": "0xc6117e28b2ceb02f74d4e6e0b363be3b147801ce0350836b0b01042869793de7",
    "transactionHash": "0x919ccb89e253893cfe158a48984b3586a8d9638a22db9fdad3c6abf4662d870c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1072284",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "885e20f6e7d7f4600e9c8042c6a62850",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gatewayId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gatewayName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"long\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"}],\"name\":\"addGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGateways\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"long\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"}],\"internalType\":\"struct Leafium.Gateway[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGateways\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"long\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"}],\"internalType\":\"struct Leafium.Gateway[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Leafium.sol\":\"Leafium\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Leafium.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LeafiumToken.sol\\\";\\n\\ncontract Leafium {\\n    struct Gateway {\\n        string id;\\n        string name;\\n        string lat;\\n        string long;\\n        uint256 altitude;\\n    }\\n\\n    LeafiumToken token;\\n\\n    mapping(address => Gateway[]) private userToGateways;\\n    mapping(string => bool) private gatewayExists;\\n    Gateway[] private gateways;\\n    uint256 reward = 50 * (10 ** 18);\\n\\n    constructor(address tokenAddress) {\\n        token = LeafiumToken(tokenAddress);\\n    }\\n\\n    function addGateway(\\n        string memory gatewayId,\\n        string memory gatewayName,\\n        string memory lat,\\n        string memory long,\\n        uint256 altitude\\n    ) public {\\n        Gateway memory newGateway = Gateway(\\n            gatewayId,\\n            gatewayName,\\n            lat,\\n            long,\\n            altitude\\n        );\\n        require(\\n            gatewayExists[gatewayId] == false,\\n            \\\"Gateway already registered!\\\"\\n        );\\n        gateways.push(newGateway);\\n        gatewayExists[gatewayId] = true;\\n        userToGateways[msg.sender].push(newGateway);\\n        token.rewardTo(msg.sender, reward);\\n    }\\n\\n    function getMyGateways() public view returns (Gateway[] memory) {\\n        return userToGateways[msg.sender];\\n    }\\n\\n    function getGateways() public view returns (Gateway[] memory) {\\n        return gateways;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return token.balanceOf(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6c319eb6b42149ee6324e61512d8983984d1fdde012d4a97df046fd5c80d52d8\",\"license\":\"MIT\"},\"contracts/LeafiumToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract LeafiumToken is ERC20 {\\n    constructor(uint256 initialSupply) ERC20(\\\"Leafium\\\", \\\"LFM\\\") {\\n        _mint(address(this), initialSupply);\\n    }\\n\\n    function rewardTo(address to, uint256 amount) public {\\n        super._transfer(address(this), to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4e8460fb753423bc2cc18d68dca635f3c84d6718ce64c0b0edc73107fa1c3c1f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526802b5e3af16b18800006004553480156200001e57600080fd5b50604051620012ca380380620012ca8339818101604052810190620000449190620000f5565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000127565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000bd8262000090565b9050919050565b620000cf81620000b0565b8114620000db57600080fd5b50565b600081519050620000ef81620000c4565b92915050565b6000602082840312156200010e576200010d6200008b565b5b60006200011e84828501620000de565b91505092915050565b61119380620001376000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806312065fe014610051578063741bf4a31461006f578063877d84b91461008d578063d82778ce146100a9575b600080fd5b6100596100c7565b6040516100669190610ad3565b60405180910390f35b610077610178565b6040516100849190610ce3565b60405180910390f35b6100a760048036038101906100a29190610e7a565b610466565b005b6100b1610766565b6040516100be9190610ce3565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101239190610fa6565b60206040518083038186803b15801561013b57600080fd5b505afa15801561014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101739190610fd6565b905090565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561045d57838290600052602060002090600502016040518060a001604052908160008201805461020c90611032565b80601f016020809104026020016040519081016040528092919081815260200182805461023890611032565b80156102855780601f1061025a57610100808354040283529160200191610285565b820191906000526020600020905b81548152906001019060200180831161026857829003601f168201915b5050505050815260200160018201805461029e90611032565b80601f01602080910402602001604051908101604052809291908181526020018280546102ca90611032565b80156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b5050505050815260200160028201805461033090611032565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611032565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020016003820180546103c290611032565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90611032565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b50505050508152602001600482015481525050815260200190600101906101d9565b50505050905090565b60006040518060a00160405280878152602001868152602001858152602001848152602001838152509050600015156002876040516104a591906110a0565b908152602001604051809103902060009054906101000a900460ff16151514610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90611114565b60405180910390fd5b6003819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001908051906020019061054b929190610a17565b506020820151816001019080519060200190610568929190610a17565b506040820151816002019080519060200190610585929190610a17565b5060608201518160030190805190602001906105a2929190610a17565b5060808201518160040155505060016002876040516105c191906110a0565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001908051906020019061066b929190610a17565b506020820151816001019080519060200190610688929190610a17565b5060408201518160020190805190602001906106a5929190610a17565b5060608201518160030190805190602001906106c2929190610a17565b5060808201518160040155505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8b71c64336004546040518363ffffffff1660e01b815260040161072c929190611134565b600060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b50505050505050505050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610a0e57838290600052602060002090600502016040518060a00160405290816000820180546107bd90611032565b80601f01602080910402602001604051908101604052809291908181526020018280546107e990611032565b80156108365780601f1061080b57610100808354040283529160200191610836565b820191906000526020600020905b81548152906001019060200180831161081957829003601f168201915b5050505050815260200160018201805461084f90611032565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90611032565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020016002820180546108e190611032565b80601f016020809104026020016040519081016040528092919081815260200182805461090d90611032565b801561095a5780601f1061092f5761010080835404028352916020019161095a565b820191906000526020600020905b81548152906001019060200180831161093d57829003601f168201915b5050505050815260200160038201805461097390611032565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90611032565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050505081526020016004820154815250508152602001906001019061078a565b50505050905090565b828054610a2390611032565b90600052602060002090601f016020900481019282610a455760008555610a8c565b82601f10610a5e57805160ff1916838001178555610a8c565b82800160010185558215610a8c579182015b82811115610a8b578251825591602001919060010190610a70565b5b509050610a999190610a9d565b5090565b5b80821115610ab6576000816000905550600101610a9e565b5090565b6000819050919050565b610acd81610aba565b82525050565b6000602082019050610ae86000830184610ac4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b54578082015181840152602081019050610b39565b83811115610b63576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b8582610b1a565b610b8f8185610b25565b9350610b9f818560208601610b36565b610ba881610b69565b840191505092915050565b610bbc81610aba565b82525050565b600060a0830160008301518482036000860152610bdf8282610b7a565b91505060208301518482036020860152610bf98282610b7a565b91505060408301518482036040860152610c138282610b7a565b91505060608301518482036060860152610c2d8282610b7a565b9150506080830151610c426080860182610bb3565b508091505092915050565b6000610c598383610bc2565b905092915050565b6000602082019050919050565b6000610c7982610aee565b610c838185610af9565b935083602082028501610c9585610b0a565b8060005b85811015610cd15784840389528151610cb28582610c4d565b9450610cbd83610c61565b925060208a01995050600181019050610c99565b50829750879550505050505092915050565b60006020820190508181036000830152610cfd8184610c6e565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d5b82610b69565b810181811067ffffffffffffffff82111715610d7a57610d79610d23565b5b80604052505050565b6000610d8d610d05565b9050610d998282610d52565b919050565b600067ffffffffffffffff821115610db957610db8610d23565b5b610dc282610b69565b9050602081019050919050565b82818337600083830152505050565b6000610df1610dec84610d9e565b610d83565b905082815260208101848484011115610e0d57610e0c610d1e565b5b610e18848285610dcf565b509392505050565b600082601f830112610e3557610e34610d19565b5b8135610e45848260208601610dde565b91505092915050565b610e5781610aba565b8114610e6257600080fd5b50565b600081359050610e7481610e4e565b92915050565b600080600080600060a08688031215610e9657610e95610d0f565b5b600086013567ffffffffffffffff811115610eb457610eb3610d14565b5b610ec088828901610e20565b955050602086013567ffffffffffffffff811115610ee157610ee0610d14565b5b610eed88828901610e20565b945050604086013567ffffffffffffffff811115610f0e57610f0d610d14565b5b610f1a88828901610e20565b935050606086013567ffffffffffffffff811115610f3b57610f3a610d14565b5b610f4788828901610e20565b9250506080610f5888828901610e65565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9082610f65565b9050919050565b610fa081610f85565b82525050565b6000602082019050610fbb6000830184610f97565b92915050565b600081519050610fd081610e4e565b92915050565b600060208284031215610fec57610feb610d0f565b5b6000610ffa84828501610fc1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104a57607f821691505b6020821081141561105e5761105d611003565b5b50919050565b600081905092915050565b600061107a82610b1a565b6110848185611064565b9350611094818560208601610b36565b80840191505092915050565b60006110ac828461106f565b915081905092915050565b600082825260208201905092915050565b7f4761746577617920616c72656164792072656769737465726564210000000000600082015250565b60006110fe601b836110b7565b9150611109826110c8565b602082019050919050565b6000602082019050818103600083015261112d816110f1565b9050919050565b60006040820190506111496000830185610f97565b6111566020830184610ac4565b939250505056fea2646970667358221220c6d2a1c52b1b379e16140467c1b6e6c76217af54258fcfeb6758fdb47bf6bdfb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806312065fe014610051578063741bf4a31461006f578063877d84b91461008d578063d82778ce146100a9575b600080fd5b6100596100c7565b6040516100669190610ad3565b60405180910390f35b610077610178565b6040516100849190610ce3565b60405180910390f35b6100a760048036038101906100a29190610e7a565b610466565b005b6100b1610766565b6040516100be9190610ce3565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101239190610fa6565b60206040518083038186803b15801561013b57600080fd5b505afa15801561014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101739190610fd6565b905090565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561045d57838290600052602060002090600502016040518060a001604052908160008201805461020c90611032565b80601f016020809104026020016040519081016040528092919081815260200182805461023890611032565b80156102855780601f1061025a57610100808354040283529160200191610285565b820191906000526020600020905b81548152906001019060200180831161026857829003601f168201915b5050505050815260200160018201805461029e90611032565b80601f01602080910402602001604051908101604052809291908181526020018280546102ca90611032565b80156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b5050505050815260200160028201805461033090611032565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611032565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020016003820180546103c290611032565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90611032565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b50505050508152602001600482015481525050815260200190600101906101d9565b50505050905090565b60006040518060a00160405280878152602001868152602001858152602001848152602001838152509050600015156002876040516104a591906110a0565b908152602001604051809103902060009054906101000a900460ff16151514610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90611114565b60405180910390fd5b6003819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001908051906020019061054b929190610a17565b506020820151816001019080519060200190610568929190610a17565b506040820151816002019080519060200190610585929190610a17565b5060608201518160030190805190602001906105a2929190610a17565b5060808201518160040155505060016002876040516105c191906110a0565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001908051906020019061066b929190610a17565b506020820151816001019080519060200190610688929190610a17565b5060408201518160020190805190602001906106a5929190610a17565b5060608201518160030190805190602001906106c2929190610a17565b5060808201518160040155505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8b71c64336004546040518363ffffffff1660e01b815260040161072c929190611134565b600060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b50505050505050505050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610a0e57838290600052602060002090600502016040518060a00160405290816000820180546107bd90611032565b80601f01602080910402602001604051908101604052809291908181526020018280546107e990611032565b80156108365780601f1061080b57610100808354040283529160200191610836565b820191906000526020600020905b81548152906001019060200180831161081957829003601f168201915b5050505050815260200160018201805461084f90611032565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90611032565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b505050505081526020016002820180546108e190611032565b80601f016020809104026020016040519081016040528092919081815260200182805461090d90611032565b801561095a5780601f1061092f5761010080835404028352916020019161095a565b820191906000526020600020905b81548152906001019060200180831161093d57829003601f168201915b5050505050815260200160038201805461097390611032565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90611032565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050505081526020016004820154815250508152602001906001019061078a565b50505050905090565b828054610a2390611032565b90600052602060002090601f016020900481019282610a455760008555610a8c565b82601f10610a5e57805160ff1916838001178555610a8c565b82800160010185558215610a8c579182015b82811115610a8b578251825591602001919060010190610a70565b5b509050610a999190610a9d565b5090565b5b80821115610ab6576000816000905550600101610a9e565b5090565b6000819050919050565b610acd81610aba565b82525050565b6000602082019050610ae86000830184610ac4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b54578082015181840152602081019050610b39565b83811115610b63576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b8582610b1a565b610b8f8185610b25565b9350610b9f818560208601610b36565b610ba881610b69565b840191505092915050565b610bbc81610aba565b82525050565b600060a0830160008301518482036000860152610bdf8282610b7a565b91505060208301518482036020860152610bf98282610b7a565b91505060408301518482036040860152610c138282610b7a565b91505060608301518482036060860152610c2d8282610b7a565b9150506080830151610c426080860182610bb3565b508091505092915050565b6000610c598383610bc2565b905092915050565b6000602082019050919050565b6000610c7982610aee565b610c838185610af9565b935083602082028501610c9585610b0a565b8060005b85811015610cd15784840389528151610cb28582610c4d565b9450610cbd83610c61565b925060208a01995050600181019050610c99565b50829750879550505050505092915050565b60006020820190508181036000830152610cfd8184610c6e565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d5b82610b69565b810181811067ffffffffffffffff82111715610d7a57610d79610d23565b5b80604052505050565b6000610d8d610d05565b9050610d998282610d52565b919050565b600067ffffffffffffffff821115610db957610db8610d23565b5b610dc282610b69565b9050602081019050919050565b82818337600083830152505050565b6000610df1610dec84610d9e565b610d83565b905082815260208101848484011115610e0d57610e0c610d1e565b5b610e18848285610dcf565b509392505050565b600082601f830112610e3557610e34610d19565b5b8135610e45848260208601610dde565b91505092915050565b610e5781610aba565b8114610e6257600080fd5b50565b600081359050610e7481610e4e565b92915050565b600080600080600060a08688031215610e9657610e95610d0f565b5b600086013567ffffffffffffffff811115610eb457610eb3610d14565b5b610ec088828901610e20565b955050602086013567ffffffffffffffff811115610ee157610ee0610d14565b5b610eed88828901610e20565b945050604086013567ffffffffffffffff811115610f0e57610f0d610d14565b5b610f1a88828901610e20565b935050606086013567ffffffffffffffff811115610f3b57610f3a610d14565b5b610f4788828901610e20565b9250506080610f5888828901610e65565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9082610f65565b9050919050565b610fa081610f85565b82525050565b6000602082019050610fbb6000830184610f97565b92915050565b600081519050610fd081610e4e565b92915050565b600060208284031215610fec57610feb610d0f565b5b6000610ffa84828501610fc1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104a57607f821691505b6020821081141561105e5761105d611003565b5b50919050565b600081905092915050565b600061107a82610b1a565b6110848185611064565b9350611094818560208601610b36565b80840191505092915050565b60006110ac828461106f565b915081905092915050565b600082825260208201905092915050565b7f4761746577617920616c72656164792072656769737465726564210000000000600082015250565b60006110fe601b836110b7565b9150611109826110c8565b602082019050919050565b6000602082019050818103600083015261112d816110f1565b9050919050565b60006040820190506111496000830185610f97565b6111566020830184610ac4565b939250505056fea2646970667358221220c6d2a1c52b1b379e16140467c1b6e6c76217af54258fcfeb6758fdb47bf6bdfb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 728,
        "contract": "contracts/Leafium.sol:Leafium",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(LeafiumToken)903"
      },
      {
        "astId": 734,
        "contract": "contracts/Leafium.sol:Leafium",
        "label": "userToGateways",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Gateway)725_storage)dyn_storage)"
      },
      {
        "astId": 738,
        "contract": "contracts/Leafium.sol:Leafium",
        "label": "gatewayExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 742,
        "contract": "contracts/Leafium.sol:Leafium",
        "label": "gateways",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Gateway)725_storage)dyn_storage"
      },
      {
        "astId": 750,
        "contract": "contracts/Leafium.sol:Leafium",
        "label": "reward",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Gateway)725_storage)dyn_storage": {
        "base": "t_struct(Gateway)725_storage",
        "encoding": "dynamic_array",
        "label": "struct Leafium.Gateway[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LeafiumToken)903": {
        "encoding": "inplace",
        "label": "contract LeafiumToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Gateway)725_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Leafium.Gateway[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Gateway)725_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Gateway)725_storage": {
        "encoding": "inplace",
        "label": "struct Leafium.Gateway",
        "members": [
          {
            "astId": 716,
            "contract": "contracts/Leafium.sol:Leafium",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 718,
            "contract": "contracts/Leafium.sol:Leafium",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 720,
            "contract": "contracts/Leafium.sol:Leafium",
            "label": "lat",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 722,
            "contract": "contracts/Leafium.sol:Leafium",
            "label": "long",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 724,
            "contract": "contracts/Leafium.sol:Leafium",
            "label": "altitude",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}